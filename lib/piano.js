// Generated by CoffeeScript 1.8.0
(function() {
  var canvas, ctx, draw_halfkey, draw_halfkey_pressed, draw_halfkey_released, draw_key, draw_key_pressed, draw_key_released, draw_piano, gui_handle_action, halfkey_count, halfkey_height, halfkey_offset_x, halfkey_position_y, halfkey_positions_x, halfkey_status, halfkey_width, key_count, key_height, key_position_y, key_positions_x, key_radius, key_status, key_width, keyboard_end, keyboard_start, keyboard_width, note_status, note_to_piano_key, piano, press_halfkey, press_key, press_note, redraw_piano_decorat, release_halfkey, release_key, release_note, select_action, translate, with_transparent_blue_decorat, x;

  key_count = 26;

  keyboard_start = 3;

  keyboard_end = 603;

  keyboard_width = keyboard_end - keyboard_start;

  key_width = keyboard_width / (key_count - 1);

  key_height = key_width * 5;

  halfkey_width = key_width * 3 / 5;

  halfkey_height = key_width * 3;

  key_radius = key_width / 5;

  key_positions_x = (function() {
    var _i, _results;
    _results = [];
    for (x = _i = keyboard_start; key_width > 0 ? _i <= keyboard_end : _i >= keyboard_end; x = _i += key_width) {
      _results.push(x);
    }
    return _results;
  })();

  key_position_y = 5;

  halfkey_offset_x = key_width * 7 / 10;

  halfkey_positions_x = (function() {
    var _i, _ref, _results;
    _results = [];
    for (x = _i = _ref = keyboard_start + halfkey_offset_x; key_width > 0 ? _i <= keyboard_end : _i >= keyboard_end; x = _i += key_width) {
      _results.push(x);
    }
    return _results;
  })();

  halfkey_position_y = key_position_y - 1;

  key_count = key_positions_x.length;

  halfkey_count = halfkey_positions_x.length;

  key_status = (function() {
    var _i, _results;
    _results = [];
    for (_i = 1; 1 <= key_count ? _i <= key_count : _i >= key_count; 1 <= key_count ? _i++ : _i--) {
      _results.push('up');
    }
    return _results;
  })();

  halfkey_status = (function() {
    var _i, _results;
    _results = [];
    for (_i = 1; 1 <= halfkey_count ? _i <= halfkey_count : _i >= halfkey_count; 1 <= halfkey_count ? _i++ : _i--) {
      _results.push('up');
    }
    return _results;
  })();

  ctx = null;

  canvas = null;

  piano = function() {
    canvas = document.getElementById('piano');
    ctx = canvas.getContext('2d');
    return draw_piano();
  };

  draw_piano = function() {
    var n, s, _i, _j, _len, _len1, _results;
    for (n = _i = 0, _len = key_status.length; _i < _len; n = ++_i) {
      s = key_status[n];
      switch (s) {
        case 'up':
          draw_key_released(n);
          break;
        case 'down':
          draw_key_pressed(n);
      }
    }
    _results = [];
    for (n = _j = 0, _len1 = halfkey_status.length; _j < _len1; n = ++_j) {
      s = halfkey_status[n];
      switch (s) {
        case 'up':
          _results.push(draw_halfkey_released(n));
          break;
        case 'down':
          _results.push(draw_halfkey_pressed(n));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  with_transparent_blue_decorat = function(func) {
    return function() {
      var fs;
      fs = ctx.fillStyle;
      ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';
      func.apply(this, arguments);
      return ctx.fillStyle = fs;
    };
  };

  draw_key_released = function(num) {
    return draw_key(num);
  };

  draw_key_pressed = function(num) {
    draw_key(num);
    return (with_transparent_blue_decorat(draw_key))(num, true);
  };

  draw_halfkey_released = function(num) {
    return draw_halfkey(num);
  };

  draw_halfkey_pressed = function(num) {
    draw_halfkey(num);
    return (with_transparent_blue_decorat(draw_halfkey))(num);
  };

  draw_key = function(num, fill) {
    return util.round_rect(ctx, key_positions_x[num], key_position_y, key_width, key_height, key_radius, fill);
  };

  draw_halfkey = function(num) {
    var _ref;
    if ((_ref = num % 7) !== 2 && _ref !== 6) {
      return util.round_rect(ctx, halfkey_positions_x[num], halfkey_position_y, halfkey_width, halfkey_height, key_radius, true);
    }
  };

  redraw_piano_decorat = function(func) {
    return function() {
      func.apply(this, arguments);
      util.clear_canvas(ctx, canvas);
      return draw_piano();
    };
  };

  press_key = redraw_piano_decorat(function(num) {
    return key_status[num] = 'down';
  });

  release_key = redraw_piano_decorat(function(num) {
    return key_status[num] = 'up';
  });

  press_halfkey = redraw_piano_decorat(function(num) {
    return halfkey_status[num] = 'down';
  });

  release_halfkey = redraw_piano_decorat(function(num) {
    return halfkey_status[num] = 'up';
  });

  translate = {
    white: {
      0: 0,
      2: 1,
      4: 2,
      5: 3,
      7: 4,
      9: 5,
      11: 6
    },
    black: {
      1: 0,
      3: 1,
      6: 3,
      8: 4,
      10: 5
    }
  };

  note_to_piano_key = function(note) {
    var alphabet, num, type;
    alphabet = (note - 48) % 12;
    type = alphabet in translate.black ? 'black' : 'white';
    num = Math.floor((note - 48) / 12) * 7 + translate[type][alphabet];
    return [type, num];
  };

  select_action = {
    press: {
      white: press_key,
      black: press_halfkey
    },
    release: {
      white: release_key,
      black: release_halfkey
    }
  };

  gui_handle_action = function(action_type, note) {
    var key_num, key_type, _ref;
    _ref = note_to_piano_key(note), key_type = _ref[0], key_num = _ref[1];
    return select_action[action_type][key_type](key_num);
  };

  note_status = [];

  press_note = function(note) {
    if (note_status[note] == null) {
      note_status[note] = true;
      MIDI.noteOn(0, note, 127, 0);
      return gui_handle_action('press', note);
    }
  };

  release_note = function(note) {
    if (note_status[note] != null) {
      note_status[note] = null;
      MIDI.noteOff(0, note, 0);
      return gui_handle_action('release', note);
    }
  };

  window.piano = {
    piano: piano,
    press_note: press_note,
    release_note: release_note
  };

}).call(this);
