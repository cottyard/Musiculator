// Generated by CoffeeScript 1.8.0
(function() {
  var button_to_keyboard_literal, end_playing_func, play, playing, press_button, release_button, start_playing, stop;

  window.keyboard.add_press_handler(function(key_event) {
    if (window.keyboard.is_auto_triggered(key_event)) {
      return;
    }
    return stop();
  });

  button_to_keyboard_literal = {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5',
    '6': '6',
    '7': '7',
    'C': '8',
    'D': '9',
    'E': '0',
    'F': '-',
    'G': '=',
    '#': 'A',
    'b': 'Z',
    '+': 'S',
    '-': 'X'
  };

  press_button = function(button) {
    return window.keyboard.simulate_keydown(button_to_keyboard_literal[button]);
  };

  release_button = function(button) {
    return window.keyboard.simulate_keyup(button_to_keyboard_literal[button]);
  };

  start_playing = function(instructions, callback_on_termination) {
    var cookbook, delay, end_playing, hold_button, holded_buttons, holded_buttons_not_recorded, instr_scanner, move_on, timeout_obj, unhold_all, unhold_button;
    instr_scanner = window.util.generator(instructions);
    timeout_obj = null;
    holded_buttons = [];
    holded_buttons_not_recorded = [];
    delay = function(callback, millisecs) {
      return timeout_obj = setTimeout(callback, millisecs);
    };
    hold_button = function(button, holded_list) {
      if (holded_list == null) {
        holded_list = holded_buttons;
      }
      press_button(button);
      return holded_list.push(button);
    };
    unhold_button = function(button, holded_list) {
      var unholded;
      if (holded_list == null) {
        holded_list = holded_buttons;
      }
      release_button(button);
      unholded = holded_list.indexOf(button);
      return holded_list.splice(unholded, unholded);
    };
    unhold_all = function(holded_list) {
      var k, _i, _len;
      if (holded_list == null) {
        holded_list = holded_buttons;
      }
      for (_i = 0, _len = holded_list.length; _i < _len; _i++) {
        k = holded_list[_i];
        release_button(k);
      }
      return holded_list = [];
    };
    cookbook = {
      '~': function() {
        hold_button(instr_scanner.next());
        return move_on();
      },
      '^': function() {
        unhold_button(instr_scanner.next());
        return move_on();
      },
      '&': function() {
        hold_button(instr_scanner.next(), holded_buttons_not_recorded);
        return move_on();
      },
      '%': function() {
        unhold_all();
        return move_on();
      },
      '(': function() {
        var digits, millisecs, n;
        digits = ((function() {
          var _results;
          _results = [];
          while ((n = instr_scanner.next()) !== ')') {
            _results.push(n);
          }
          return _results;
        })());
        millisecs = parseInt(digits.join(''));
        return delay(move_on, millisecs);
      }
    };
    (move_on = function() {
      var instr;
      instr = instr_scanner.next();
      if (instr != null) {
        return cookbook[instr]();
      } else {
        end_playing();
        return callback_on_termination();
      }
    })();
    end_playing = function() {
      unhold_all(holded_buttons);
      unhold_all(holded_buttons_not_recorded);
      if (timeout_obj != null) {
        return clearTimeout(timeout_obj);
      }
    };
    return end_playing;
  };

  playing = false;

  end_playing_func = null;

  play = function(instructions) {
    if (!playing) {
      end_playing_func = start_playing(instructions, function() {
        return playing = false;
      });
      return playing = true;
    }
  };

  stop = function() {
    if (playing) {
      end_playing_func();
      return playing = false;
    }
  };

  window.autoplayer = {
    play: play,
    stop: stop
  };

}).call(this);
