// Generated by CoffeeScript 1.7.1
(function() {
  var draw_halfkey, draw_halfkey_pressed, draw_halfkey_released, draw_key, draw_key_pressed, draw_key_released, draw_piano, halfkey_height, halfkey_offset_x, halfkey_position_y, halfkey_positions_x, halfkey_width, key_count, key_height, key_position_y, key_positions_x, key_radius, key_width, keyboard_end, keyboard_start, keyboard_width, round_rect, util, with_transparent_blue, x;

  round_rect = function(ctx, x, y, width, height, radius, fill) {
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    if (fill) {
      return ctx.fill();
    } else {
      return ctx.stroke();
    }
  };

  util = {
    round_rect: round_rect
  };

  key_count = 26;

  keyboard_start = 3;

  keyboard_end = 603;

  keyboard_width = keyboard_end - keyboard_start;

  key_width = keyboard_width / (key_count - 1);

  key_height = key_width * 5;

  halfkey_width = key_width * 3 / 5;

  halfkey_height = key_width * 3;

  key_radius = key_width / 5;

  key_positions_x = (function() {
    var _i, _results;
    _results = [];
    for (x = _i = keyboard_start; key_width > 0 ? _i <= keyboard_end : _i >= keyboard_end; x = _i += key_width) {
      _results.push(x);
    }
    return _results;
  })();

  key_position_y = 5;

  halfkey_offset_x = key_width * 7 / 10;

  halfkey_positions_x = (function() {
    var _i, _ref, _results;
    _results = [];
    for (x = _i = _ref = keyboard_start + halfkey_offset_x; key_width > 0 ? _i <= keyboard_end : _i >= keyboard_end; x = _i += key_width) {
      _results.push(x);
    }
    return _results;
  })();

  halfkey_position_y = key_position_y - 1;

  draw_piano = function() {
    var canvas, ctx, n, _i, _j;
    canvas = document.getElementById('piano');
    ctx = canvas.getContext('2d');
    for (n = _i = 1; 1 <= key_count ? _i <= key_count : _i >= key_count; n = 1 <= key_count ? ++_i : --_i) {
      draw_key_released(ctx, n);
    }
    draw_key_pressed(ctx, 3);
    for (n = _j = 1; 1 <= key_count ? _j <= key_count : _j >= key_count; n = 1 <= key_count ? ++_j : --_j) {
      draw_halfkey_released(ctx, n);
    }
    return draw_halfkey_pressed(ctx, 1);
  };

  with_transparent_blue = function(ctx, func) {
    return function() {
      var fs;
      fs = ctx.fillStyle;
      ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';
      func.apply(this, arguments);
      return ctx.fillStyle = fs;
    };
  };

  draw_key = function(ctx, num, fill) {
    return util.round_rect(ctx, key_positions_x[num - 1], key_position_y, key_width, key_height, key_radius, fill);
  };

  draw_key_released = function(ctx, num) {
    return draw_key(ctx, num);
  };

  draw_key_pressed = function(ctx, num) {
    return (with_transparent_blue(ctx, draw_key))(ctx, num, true);
  };

  draw_halfkey = function(ctx, num) {
    var _ref;
    if ((_ref = num % 7) !== 3 && _ref !== 0) {
      return util.round_rect(ctx, halfkey_positions_x[num - 1], halfkey_position_y, halfkey_width, halfkey_height, key_radius, true);
    }
  };

  draw_halfkey_released = function(ctx, num) {
    return draw_halfkey(ctx, num);
  };

  draw_halfkey_pressed = function(ctx, num) {
    return (with_transparent_blue(ctx, draw_halfkey))(ctx, num);
  };

  window.draw_piano = draw_piano;

}).call(this);
